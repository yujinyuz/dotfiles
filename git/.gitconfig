[alias]
	; Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	aa = add --all
	ap = add --patch
	authors = shortlog -e -s -n
  ; br = branch -v --sort=committerdate
  br = for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short) %(authorname) %(refname:short)'
	brs = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:cyan)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes
	c = commit
	ci = commit -v
	cleanstate = "!git reset --hard && git clean -fd"
	cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
	cm = commit -m
	co = checkout
	contributors = shortlog --summary --numbered
	d = difftool
	dl = !git ll -1
	; Show what files changed in current branch
	df = diff --name-only ; <branch_name>
	; Fetch all
	fa = fetch --all
	; Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	; Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	; Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	; Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	fl = log -u
	; Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	ld = log --pretty=format:\"%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]\" --decorate --date=relative
	lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
	ll = log --pretty=format:\"%C(yellow)%h%Cred%d %Creset%s%Cblue [%cn]\" --decorate --numstat
	; Usually used for listing files managed by git bare repo
	ls = ls-tree --full-tree -r --name-only HEAD
	modified = ls-files -m
	pu = push
	; It will halt the push operation if someone has pushed to the same branch while you were working on it (and havenâ€™t pulled any changes).
	pf = push --force-with-lease
	pup = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
	remotes = remote -v
	rename-branch = branch -m
	s = status --short --branch
	st = status
	staged = diff --cached --ignore-submodules=dirty
	unpushed = "cherry -v"
	unstage = "restore --staged ."
	wip = "!git add . && git commit -m '[WIP] Just reset via git reset HEAD~1'"
  ; https://stackoverflow.com/a/62303/3788603
	l = log --reverse --no-merges --stat @{1}..
	; Diff changes against last pull
	lcrev = log --reverse --no-merges --stat @{1}..
[core]
	excludesfile = ~/.gitignoreglobal
	; S = chop long lines (rather than wrap them onto next line)
	pager = less -S
[commit]
	template = ~/.gitmessage
	verbose = true
[color]
	ui = auto
[color "diff-highlight"]
	newhighlight = reverse
	newreset = noreverse
	oldhighlight = reverse
	oldreset = noreverse
; [color "diff-highlight"]
;	oldNormal = red bold
;	oldHighlight = red bold 52
;	newNormal = green bold
;	newHighlight = green bold 22
[color "status"]
	added = green
	changed = yellow
	untracked = cyan
[color "interactive"]
	prompt = blue reverse
[color "diff"]
	commit = green
	meta = yellow
	frag = cyan
	old = red
	new = green
	whitespace = red reverse
[diff]
	algorithm = histogram
	compactionHeuristic = true
	# Detect copies as well as renames
	renames = copies
[diff "bin"]
	; Use `hexdump` to diff binary files
	textconv = hexdump -v -C
[difftool]
	prompt = false
[difftool "vimdiff"]
	cmd = nvim -d $LOCAL $REMOTE -c '$wincmd w' -c 'wincmd J'
[fetch]
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	process = git-lfs filter-process
	required = true
	smudge = git-lfs smudge -- %f
[init]
	templatedir = ~/.git_template
	defaultBranch = main
[interactive]
	diffFilter = diff-highlight
[log]
	decorate = short
[merge]
	conflictStyle = merge
	ff = no
	commit = no
	summary = true
	; Include summaries of merged commits in newly created merge commit messages
	log = true
[pager]
	diff = ~/.local/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'
	log = ~/.local/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'
	show = ~/.local/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'
	whatchanged = ~/.local/bin/diff-highlight | menos -iFMRSX --pattern='^(commit|diff)'
	show-branch = true
	status = true
[pull]
	rebase = true
[push]
	; https://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/
	default = simple
	; https://stackoverflow.com/a/26438076/3788603
	followTags = true
[rebase]
  autostash = true
[user]
	email = eevoliveros@gmail.com
	name = Eugene Oliveros
	signingkey = A05BDF3FF69CA6A8
[ghq]
	root = ~/Sources
[include]
	path = ~/.gitconfig.local
