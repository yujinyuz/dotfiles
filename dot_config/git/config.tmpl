[alias]
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	aa = add --all
	ap = add --patch
	authors = shortlog -e -s -n
	br = "for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short) %(authorname) %(refname:short)'"
	brs = "for-each-ref --sort=-committerdate --format='%(color:blue)%(authordate:relative)\t%(color:cyan)%(authorname)\t%(color:white)%(color:bold)%(refname:short)' refs/remotes"
	c = commit
	ci = commit -v
	cleanstate = "!f() { git reset --hard && git clean -fd; }; f"
	cleanup = "!git branch --merged | grep -v '\\*\\|master\\|develop' | xargs -n 1 git branch -d"
	cm = commit -m
	ca = commit -a
	co = checkout
	contributors = shortlog --summary --numbered
	# Show what files changed in current branch
	df = diff --name-only ; <branch_name>
	# Fetch all
	fa = fetch --all
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	fl = log -u
	# https://stackoverflow.com/questions/13630849/git-difference-between-assume-unchanged-and-skip-worktree
	ignore = update-index --skip-worktree
	unignore = update-index --no-skip-worktree
	# Switch to a branch, creating it if necessary
	lg = "log -m --simplify-merges --color --graph --pretty=format:'%Cred%h%Creset %s %Cgreen(%ar) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative"
	ll = "log --name-status --date=relative --pretty=format:\"%C(red)%h %C(reset)(%cd) %C(green)%an %Creset%s %C(yellow)%d%Creset\""
	# Usually used for listing files managed by git bare repo
	ls = ls-tree --full-tree -r --name-only HEAD
	modified = ls-files -m
	pu = push
	# It will halt the push operation if someone has pushed to the same branch while you were working on it (and havenâ€™t pulled any changes).
	pf = push --force-with-lease
	pup = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
	remotes = remote -v
	rename-branch = branch -m
	s = status --short --branch
	st = status
	staged = diff --cached --ignore-submodules=dirty
	unpushed = "cherry -v"
	unstage = "restore --staged ."
	wip = "!git add . && git commit -m '[WIP] Just reset via git reset HEAD~1'"
	# https://stackoverflow.com/a/62303/3788603
	l = log --reverse --no-merges --stat @{1}..
	# Diff changes against last pull
	lcrev = log --reverse --no-merges --stat @{1}..
	dw = diff --color --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
[core]
	excludesfile = ~/.gitignoreglobal
	# S = chop long lines (rather than wrap them onto next line)
	#
	# This in addition to the "iFMRX" that we get via LESS environment variable.
	# (In the absence LESS, Git would use "FRX".)
	# pager = less -S
	pager = delta
[commit]
	template = ~/.gitmessage
	verbose = true
[rerere]
	enabled = true
[color]
	ui = auto
[color "status"]
	added = green
	changed = yellow
	untracked = blue
[color "interactive"]
	prompt = blue reverse
[color "diff"]
	commit = green
	meta = yellow
	frag = cyan
	old = red
	new = green
	whitespace = red reverse
[color "diff-highlight"]
	newhighlight = reverse
	newreset = noreverse
	oldhighlight = reverse
	oldreset = noreverse
[diff]
	algorithm = histogram
	compactionHeuristic = true
	# Detect copies as well as renames
	renames = copies
	# Highlight code that has been moved
	colorMoved = dimmed-zebra
	# colorMoved = default
[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C
[difftool]
	prompt = false
[difftool "vimdiff"]
	cmd = nvim -d $LOCAL $REMOTE -c '$wincmd w' -c 'wincmd J'
[fetch]
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	process = git-lfs filter-process
	required = true
	smudge = git-lfs smudge -- %f
[init]
	templatedir = ~/.git_template
	defaultBranch = main
[interactive]
	# diffFilter = diff-highlight
	# diffFilter = delta --color-only
	diffFilter = delta --color-only --features=interactive
[log]
	decorate = short
[merge]
	conflictStyle = zdiff3
	ff = no
	commit = no
	summary = true
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[pager]
	# diff = less -iFMRSX --pattern='^(commit|diff)'
	# log = less -iFMRSX --pattern='^(commit|diff)'
	# show = less -iFMRSX --pattern='^(commit|diff)'
	# whatchanged = less -iFMRSX --pattern='^(commit|diff)'
	show-branch = true
	status = true
[delta]
	navigate = true
	diff-so-fancy = true
	syntax-theme = none
	keep-plus-minus-markers = false
	commit-style = raw
	file-style = raw
    file-decoration-style = ul
	hunk-header-decoration-style = none
	hunk-header-style = raw
	minus-style = raw
	file-added-label = [+]
	file-copied-label = [C]
	file-modified-label = [M]
	file-removed-label = [-]
	file-renamed-label = [R]
[pull]
	rebase = true
[push]
	; https://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/
	default = simple
	; https://stackoverflow.com/a/26438076/3788603
	followTags = true
[rebase]
	autoStash = true
	autoSquash = true
[user]
	email = "{{ .email }}"
	name = "{{ .name }}"
[ghq]
	root = ~/Sources
[include]
	path = ~/.gitconfig.local

# vim:noexpandtab:ts=4:sw=4:ft=gitconfig:commentstring=#\ %s
